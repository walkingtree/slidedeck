{
    "type": "class",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "GitHubWrapper"
    },
    "name": "MyClass",
    "configAlternates": {
        "github": "object",
        "repo": "object",
        "treeData": "array"
    },
    "designerId": "153f6525-f116-4029-949d-7e9606db25d5",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "branchname",
                    "callback"
                ],
                "fn": "getTree",
                "implHandler": [
                    "var me=this;",
                    "var repo=SD.util.GitInstance.getRepository();",
                    "repo.getTree(branchname + '?recursive=true', function(err, tree) {",
                    "     var obj=me.explodeTree(tree,'/');",
                    "     me.data=tree;",
                    "     callback(obj);",
                    "});",
                    ""
                ]
            },
            "name": "getTree",
            "designerId": "3e4bc5be-ecf5-4994-89a9-c8ec14521924"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "username",
                    "reponame"
                ],
                "fn": "getRepo",
                "implHandler": [
                    "this.repo = this.github.getRepo(username, reponame);",
                    "",
                    "this.repo.show(function(err, repo) {",
                    "    console.log('REPO: ', err, repo);",
                    "    ",
                    "});"
                ]
            },
            "name": "getRepo",
            "designerId": "67882dee-e9a8-47bd-8e54-83c3a07957c7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "token"
                ],
                "fn": "getInstance",
                "implHandler": [
                    "this.github = new Github({",
                    "  token: token,",
                    "  auth: \"oauth\"",
                    "});",
                    "",
                    "return this.github;"
                ]
            },
            "name": "getInstance",
            "designerId": "e5a92c73-61f8-4e62-981e-1c88fa609c47"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "branchname",
                    "path",
                    "cb"
                ],
                "fn": "getFileContent",
                "implHandler": [
                    "var repo=SD.util.GitInstance.getRepository();",
                    "repo.read(branchname, path, cb);"
                ]
            },
            "name": "getFileContent",
            "designerId": "51293534-6a45-499c-abac-c2e9ac5f77ab"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "files",
                    "del"
                ],
                "fn": "explodeTree",
                "implHandler": [
                    "var obj= this.processChildren(files, del);",
                    "       return obj;"
                ]
            },
            "name": "explodeTree",
            "designerId": "b25ae4cb-ef87-4a68-8bfb-6e37208bf044"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "files",
                    "del"
                ],
                "fn": "processChildren",
                "implHandler": [
                    " var obj = this.dissectFiles(files, del);",
                    "       obj = this.parseDirs(obj);",
                    "           for ( var i=0;i<obj.length;i++ ) {",
                    "               var node = obj[i];",
                    "               if ( node.type === 'tree' ) {",
                    "                   obj[i].children = this.processChildren(obj[i].children, del);",
                    "               }",
                    "           }",
                    "           return obj;"
                ]
            },
            "name": "processChildren",
            "designerId": "44b3d55e-28a3-45ce-84b3-3f455de156b2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "files",
                    "del"
                ],
                "fn": "dissectFiles",
                "implHandler": [
                    "var obj = [];",
                    "files.map(function (file) {",
                    "   if(!file.blobpath){",
                    "       file.blobpath=file.path;",
                    "   }",
                    "   ",
                    "   var node,fileT,path;",
                    "   if(file.split){",
                    "       fileT = file.split(del);",
                    "   }else{",
                    "       if(file.path.split){",
                    "           fileT=file.path.split(del);",
                    "       }",
                    "   }",
                    "   if ( fileT.length > 1 ) {",
                    "       path = fileT.shift();",
                    "       node = {type: 'tree',path: path,text:path,expanded:true,children: [{path:fileT.join(del),type:file.type,blobpath:file.blobpath}]};",
                    "   } else {",
                    "       var type='blob';",
                    "       var text=fileT.join(del);",
                    "       path=fileT.join(del);",
                    "       var child=[];",
                    "       var leaf=true;",
                    "       if(file.type==\"blob\"){",
                    "           leaf=true;",
                    "           type='blob';",
                    "       }",
                    "       if(file.type==\"tree\"){",
                    "           leaf=false;",
                    "           type=\"tree\";",
                    "       }",
                    "       node = {type: type,blobpath:file.blobpath,path: path,leaf:leaf,text:text,children:child,expanded:true};",
                    "   }",
                    "   obj.push(node);",
                    "});",
                    "return obj;",
                    ""
                ]
            },
            "name": "dissectFiles",
            "designerId": "45a17df1-d4d6-4195-b4e2-ef0ca45e4d05"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "obj"
                ],
                "fn": "parseDirs",
                "implHandler": [
                    "var dirs = {};",
                    "           for ( var i=0;i<obj.length;i++ ) {",
                    "               var node = obj[i];",
                    "               var process = false;",
                    "               if ( node.type === 'tree' ) {",
                    "                   var path = node.path;",
                    "                   if ( dirs[path] === undefined ) {",
                    "                       dirs[path] = i;",
                    "                   } else {",
                    "                       obj[dirs[path]].children = obj[dirs[path]].children.concat(obj[i].children);",
                    "                       obj.splice(i,1);",
                    "                       i--;",
                    "                   }",
                    "               }",
                    "           }",
                    "           return obj;"
                ]
            },
            "name": "parseDirs",
            "designerId": "5fd6bc5f-1341-4a6e-b0c2-8def956f663f"
        }
    ]
}