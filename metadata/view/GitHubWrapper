{
    "type": "class",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "GitHubWrapper",
        "github": [
            "null"
        ],
        "repo": [
            "null"
        ]
    },
    "name": "MyClass",
    "configAlternates": {
        "github": "object",
        "repo": "object",
        "treeData": "array"
    },
    "designerId": "153f6525-f116-4029-949d-7e9606db25d5",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "repo",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "github",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "branchname",
                    "callback"
                ],
                "fn": "getTree",
                "implHandler": [
                    "this.repo.getTree(branchname + '?recursive=true', function(err, tree) {",
                    "// this.repo.getTree(branchname, function(err, tree) {",
                    "",
                    "    console.log('TREE: ', err, tree);",
                    "    var treeData = [];",
                    "    var treeLength =  tree.length;",
                    "",
                    "    for(var i=0;i< treeLength;i++){",
                    "",
                    "        var nodePath = tree[i].path;",
                    "        var nodeType = tree[i].type;",
                    "        var leafNodeText = nodePath.split('\\\\').pop().split('/').pop();",
                    "",
                    "        if(nodeType === \"tree\"){",
                    "",
                    "            var pathArray = nodePath.split('/');",
                    "            if(pathArray.length === 1){",
                    "",
                    "                Ext.Array.include(treeData,{ text: nodePath,path:nodePath,expanded: true,children:[]});",
                    "            }else{",
                    "",
                    "                var parentTree = treeData,key=\"\";",
                    "                for(var p = pathArray.length - 2; p > 0; p--){",
                    "",
                    "                        key = key + \"children[0].\";",
                    "                 }",
                    "                var childNode = eval(\"parentTree[0].\" + key + \"children\");",
                    "                Ext.Array.include(childNode,{ text: leafNodeText,path:nodePath,expanded: true,children:[]});",
                    "             }",
                    "        }else if(nodeType === \"blob\"){",
                    "",
                    "",
                    "             var pathVar = nodePath.split('/');",
                    "",
                    "            if(pathVar.length > 1){",
                    "",
                    "                 var parentNode = treeData;",
                    "                 for(var x=0; x<pathVar.length-1; x++){",
                    "",
                    "                      var parentNode1 = Ext.Array.pluck(parentNode,'text');",
                    "",
                    "                      var indexValue = Ext.Array.indexOf(parentNode1,pathVar[x]);",
                    "                      var childs = parentNode[indexValue].children;",
                    "                      parentNode = childs;",
                    "",
                    "                      if(pathVar.length -2 === x){",
                    "                         Ext.Array.include(childs,{ text: leafNodeText,path:nodePath,leaf :true});",
                    "                      }",
                    "                 }",
                    "            }else{",
                    "                // Root node with type blob",
                    "                Ext.Array.include(treeData,{ text: leafNodeText,path:nodePath,leaf :true });",
                    "            }",
                    "        }",
                    "    }",
                    "    callback(treeData);",
                    "});"
                ]
            },
            "name": "getTree",
            "designerId": "3e4bc5be-ecf5-4994-89a9-c8ec14521924"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "username",
                    "reponame"
                ],
                "fn": "getRepo",
                "implHandler": [
                    "this.repo = this.github.getRepo(username, reponame);",
                    "",
                    "this.repo.show(function(err, repo) {",
                    "    console.log('REPO: ', err, repo);",
                    "    ",
                    "});"
                ]
            },
            "name": "getRepo",
            "designerId": "67882dee-e9a8-47bd-8e54-83c3a07957c7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "token"
                ],
                "fn": "getInstance",
                "implHandler": [
                    "this.github = new Github({",
                    "  token: token,",
                    "  auth: \"oauth\"",
                    "});",
                    "",
                    "return this.github;"
                ]
            },
            "name": "getInstance",
            "designerId": "e5a92c73-61f8-4e62-981e-1c88fa609c47"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "branchname",
                    "path",
                    "cb"
                ],
                "fn": "getFileContent",
                "implHandler": [
                    "this.repo.read(branchname, path, cb);"
                ]
            },
            "name": "getFileContent",
            "designerId": "51293534-6a45-499c-abac-c2e9ac5f77ab"
        }
    ]
}