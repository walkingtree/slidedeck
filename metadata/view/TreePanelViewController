{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "treepanel",
        "designer|userClassName": "TreePanelViewController"
    },
    "designerId": "34e4a2a8-57a5-45c3-9e8e-0d08c0f22958",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "handleNodeSelection",
                "implHandler": [
                    "var finalText = null;",
                    "       var text = record.getPath('text');",
                    "       finalText = text.split('.');",
                    "       if(finalText.length ==1){",
                    "           var newVal = finalText[0].replace(/[//]/g,'');",
                    "       }else {",
                    "           var newVal = finalText[1].replace(/[/]/g,' > ');",
                    "       }",
                    "       Ext.ComponentQuery.query('[itemId=contentPanel]')[0].setTitle(newVal);",
                    "",
                    "var treePnl = Ext.ComponentQuery.query('[itemId=menuPanel]')[0];",
                    "var text=treePnl.getStore().getRootNode();",
                    "if(text){",
                    "    textR=text.get('text');",
                    "}",
                    "var blobPath=record.get('blobpath');",
                    "var textString=blobPath.substr(textR.length+1,blobPath.length);",
                    "this.redirectTo(''+textString);",
                    "",
                    "var bcTitle = Ext.ComponentQuery.query('[itemId=breadcrumb]')[0];",
                    "bcTitle.setSelection(record);",
                    "",
                    "",
                    "if(record.data.leaf){",
                    "",
                    "   Ext.getCmp('content-pnl').mask('loading');",
                    "",
                    "   var path = record.data.blobpath;",
                    "   var ghUtil = Ext.create('SD.view.GitHubWrapper', {});",
                    "",
                    "   //TODO: This needs ceanup. We need to get rid of the user name in the pen",
                    "   var html = \"<iframe height='268' scrolling='no' src='http://codepen.io/ajit-kumar-azad/embed/{hash}/?height=268&theme-id=0' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 800px;'>See the Pen <a href='http://codepen.io/ajit-kumar-azad/pen/{hash}/'>{hash}</a> by Ajit Kumar (<a href='http://codepen.io/ajit-kumar-azad'>@ajit-kumar-azad</a>) on <a href='http://codepen.io'>CodePen</a>.</iframe>\";",
                    "   var tpl =  Ext.dom.Helper.createTemplate(html);",
                    "   ghUtil.getFileContent('master', path, function(err, data) {",
                    "",
                    "       var el = Ext.dom.Helper.createDom(data);",
                    "       var domEl = Ext.get(el);",
                    "       var hash = domEl.getAttribute('data-slug-hash');",
                    "       var header = '<div class=\"slide head\"><span class=\"logo\"></span><h3>' + record.parentNode.data.text + '</h3><h2 class=\"slide\">' + record.data.text + '</h2></div>';",
                    "       Ext.getCmp('content-pnl').setHtml(header + data);",
                    "       Ext.getCmp('content-pnl').addCls('markdown-body');",
                    "",
                    "       //TODO: This needs ceanup. We need to get rid of the user name in the pen",
                    "       var elArr = Ext.dom.Query.select('a[href*=http://codepen.io/ajit-kumar-azad/pen]');",
                    "       for (var i = 0; i < elArr.length; i++) {",
                    "           el = elArr[i];",
                    "           tpl.overwrite(Ext.get(el).parent(), {hash: Ext.get(el).getAttribute('text')});",
                    "       }",
                    "       Ext.getCmp('content-pnl').unmask();",
                    "   });",
                    "",
                    "",
                    "} else {",
                    "   //It is a parent node...just create a dummy slide content from the node text",
                    "",
                    "   //TODO: Make this configurable",
                    "   var html = '<div class=\"topic\"><div class=\"head\"><h1>' + record.data.text + '</h1></div><div class=\"footer\">' +",
                    "       '2008 â€” 2015 Walking Tree Consultancy Services Pvt. Ltd. All rights reserved. This document is provided for the sole use of a named ' +",
                    "       'participant in a technical training course.  Any other use or reproduction of this document is ' +",
                    "       'unlawful without the express written consent of Walking Tree Consultancy Services Pvt. Ltd.</div></div>';",
                    "   Ext.getCmp('content-pnl').setHtml(html);",
                    "",
                    "}",
                    "",
                    "var treePnl = Ext.ComponentQuery.query('[itemId=menuPanel]')[0];",
                    "treePnl.getSelectionModel().select(record);",
                    "var bcTitle = Ext.ComponentQuery.query('[itemId=breadcrumb]')[0];",
                    "bcTitle.setSelection(record);"
                ]
            },
            "name": "handleNodeSelection",
            "designerId": "3a6f6ab3-e813-4787-b619-676fd78c993a"
        },
        {
            "type": "Ext.app.route.Route",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "processRout",
                "implHandler": [
                    "var token = Ext.util.History.getToken();",
                    "",
                    "var treePnl = this.view;",
                    "var bcTitle = Ext.ComponentQuery.query('[itemId=breadcrumb]')[0];",
                    "var st = treePnl.getStore();",
                    "var extraToken=st.getRootNode().get('blobpath')+'/';",
                    "var text=extraToken+token;",
                    "var rec=st.findNode('blobpath',text);",
                    "console.log(rec);",
                    "var x = bcTitle.getState();",
                    "if(!rec){",
                    "    rec=st.getAt(0);",
                    "}",
                    "",
                    "treePnl.getSelectionModel().select(rec);",
                    "var path = rec.getPath('text');",
                    "bcTitle.setSelection(rec);",
                    "treePnl.expandPath(path,'text');",
                    "treePnl.getController().handleNodeSelection(rec);"
                ],
                "url": "#"
            },
            "name": "processRout",
            "designerId": "a248c5f4-a553-4d3a-bec4-420217c3ef30"
        }
    ]
}