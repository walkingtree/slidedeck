/*
 * File: app/view/GitHubWrapper.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SD.view.GitHubWrapper', {
    extend: 'Ext.Base',

    repo: null,
    github: null,

    getTree: function(branchname, callback) {
        this.repo.getTree(branchname + '?recursive=true', function(err, tree) {
        // this.repo.getTree(branchname, function(err, tree) {

            console.log('TREE: ', err, tree);
            var treeData = [];
            var treeLength =  tree.length;

            for(var i=0;i< treeLength;i++){

                var nodePath = tree[i].path;
                var nodeType = tree[i].type;
                var leafNodeText = nodePath.split('\\').pop().split('/').pop();

                if(nodeType === "tree"){

                    var pathArray = nodePath.split('/');
                    if(pathArray.length === 1){

                        Ext.Array.include(treeData,{ text: nodePath,path:nodePath,expanded: true,children:[]});
                    }else{

                        var parentTree = treeData,key="";
                        for(var p = pathArray.length - 2; p > 0; p--){

                                key = key + "children[0].";
                         }
                        var childNode = eval("parentTree[0]." + key + "children");
                        Ext.Array.include(childNode,{ text: leafNodeText,path:nodePath,expanded: true,children:[]});
                     }
                }else if(nodeType === "blob"){


                     var pathVar = nodePath.split('/');

                    if(pathVar.length > 1){

                         var parentNode = treeData;
                         for(var x=0; x<pathVar.length-1; x++){

                              var parentNode1 = Ext.Array.pluck(parentNode,'text');

                              var indexValue = Ext.Array.indexOf(parentNode1,pathVar[x]);
                              var childs = parentNode[indexValue].children;
                              parentNode = childs;

                              if(pathVar.length -2 === x){
                                 Ext.Array.include(childs,{ text: leafNodeText,path:nodePath,leaf :true});
                              }
                         }
                    }else{
                        // Root node with type blob
                        Ext.Array.include(treeData,{ text: leafNodeText,path:nodePath,leaf :true });
                    }
                }
            }
            callback(treeData);
        });
    },

    getRepo: function(username, reponame) {
        this.repo = this.github.getRepo(username, reponame);

        this.repo.show(function(err, repo) {
            console.log('REPO: ', err, repo);

        });
    },

    getInstance: function(token) {
        this.github = new Github({
          token: token,
          auth: "oauth"
        });

        return this.github;
    },

    getFileContent: function(branchname, path, cb) {
        this.repo.read(branchname, path, cb);
    }

});