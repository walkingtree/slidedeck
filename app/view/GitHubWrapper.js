/*
 * File: app/view/GitHubWrapper.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SD.view.GitHubWrapper', {
    extend: 'Ext.Base',

    getTree: function(branchname, callback) {
        var me=this;
        var repo=SD.util.GitInstance.getRepository();
        repo.getTree(branchname + '?recursive=true', function(err, tree) {
             var obj=me.explodeTree(tree,'/');
             me.data=tree;
             callback(obj);
        });

    },

    getRepo: function(username, reponame) {
        this.repo = this.github.getRepo(username, reponame);

        this.repo.show(function(err, repo) {
            console.log('REPO: ', err, repo);

        });
    },

    getInstance: function(token) {
        this.github = new Github({
          token: token,
          auth: "oauth"
        });

        return this.github;
    },

    getFileContent: function(branchname, path, cb) {
        var repo=SD.util.GitInstance.getRepository();
        repo.read(branchname, path, cb);
    },

    explodeTree: function(files, del) {
        var obj= this.processChildren(files, del);
               return obj;
    },

    processChildren: function(files, del) {
         var obj = this.dissectFiles(files, del);
               obj = this.parseDirs(obj);
                   for ( var i=0;i<obj.length;i++ ) {
                       var node = obj[i];
                       if ( node.type === 'tree' ) {
                           obj[i].children = this.processChildren(obj[i].children, del);
                       }
                   }
                   return obj;
    },

    dissectFiles: function(files, del) {
        var obj = [];
        var niceName = '';

        files.map(function (file) {
           if(!file.blobpath){
               file.blobpath=file.path;
           }

           var node,fileT,path;
           if(file.split){
               fileT = file.split(del);
           }else{
               if(file.path.split){
                   fileT=file.path.split(del);
               }
           }
           if ( fileT.length > 1 ) {
               path = fileT.shift();
        //        niceName = this.cleanupPathname(path);
               node = {type: 'tree',path: path,text:path,expanded:true,children: [{path:fileT.join(del),type:file.type,blobpath:file.blobpath}]};
           } else {
               var type='blob';
               var text=fileT.join(del);
               path=fileT.join(del);
               var child=[];
               var leaf=true;
               if(file.type=="blob"){
                   leaf=true;
                   type='blob';
               }
               if(file.type=="tree"){
                   leaf=false;
                   type="tree";
               }
               node = {type: type,blobpath:file.blobpath,path: path,leaf:leaf,text:text,children:child,expanded:true};
           }
           obj.push(node);
        });
        return obj;

    },

    parseDirs: function(obj) {
        var dirs = {};
                   for ( var i=0;i<obj.length;i++ ) {
                       var node = obj[i];
                       var process = false;
                       if ( node.type === 'tree' ) {
                           var path = node.path;
                           if ( dirs[path] === undefined ) {
                               dirs[path] = i;
                           } else {
                               obj[dirs[path]].children = obj[dirs[path]].children.concat(obj[i].children);
                               obj.splice(i,1);
                               i--;
                           }
                       }
                   }
                   return obj;
    },

    cleanupPathname: function(path) {
        console.log('CLEANING UP..... ' + path);
    }

});