/*
 * File: app/store/MenuStore.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SD.store.MenuStore', {
    extend: 'Ext.data.TreeStore',

    requires: [
        'Ext.data.field.Field',
        'Ext.util.Sorter'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'MyTreeStore',
            defaultRootText: ' ',
            root: {
                expanded: true
            },
            fields: [
                {
                    name: 'text'
                }
            ],
            sorters: {
                sorterFn: function(first, second) {
                    var num1 = new Number(first.data.text.split('.')[0]),
                        num2 = new Number(second.data.text.split('.')[0]);
                
                    // console.log('num1: ' + num1 + ' : num2: ' + num2);

                    return num1.valueOf() > num2.valueOf() ? 1 : (num1 === num2) ? 0 : -1;
                }
            },
            
            findNode: function (property, value, startsWith, endsWith, ignoreCase) {
                if (Ext.isEmpty(value, false)) {
                    return null;
                }

                if (value === this.model.idProperty && arguments.length < 3) {
                    return this.byIdMap[value];
                }
                var regex = Ext.String.createRegex(value, startsWith, endsWith, ignoreCase),
                        result = null;
                Ext.Object.eachValue(this.byIdMap, function (node) {
                    if (node && regex.test(node.get(property))) {
                        result = node;
                        var nodeValue = Ext.String.trim(result.data.text.split('.')[1]);
                        nodeValue = Ext.util.Format.lowercase(nodeValue);
                        if(nodeValue === value) {
                            return false;
                        }
                    }
                });
                return result;
            }
        }, cfg)]);
    }
});